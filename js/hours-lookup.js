// Look up hours information in the Tabletop system
$(function loadHours() {

  // look for data-location-hours attributes
  if ( jQuery("[data-location-hours]").length > 0 ) {

    // found at least one hours display
    Tabletop.init({
      // key is generated by Google doc
      key: '1aEV-CZIqJD9hHJWNWTWIN0I4Cgz3M8jpl4hQwA9l8JU',

      // location of hard-coded json files (not sure where they'll be stored yet)
      proxy: "/app/libhours-buildjson/",

      // function to call when the data is retrieved
      callback: loadHoursSingle,

      simpleSheet: false
    });

  } else if ( jQuery("table.hrList").length > 0 ) {

    // call this when you are ready to get the data and use it
    Tabletop.init({
        // key is generated by Google doc
        key: '1aEV-CZIqJD9hHJWNWTWIN0I4Cgz3M8jpl4hQwA9l8JU',

        // location of hard-coded json files (not sure where they'll be stored yet)
        proxy: "/app/libhours-buildjson/",

        // function to call when the data is retrieved
        callback: loadHoursGrid,

        simpleSheet: false
    });

  }

});

function getTestDate() {

  if ( window.location.search ) {
    // Need to make sure that we're getting a valid date specification
    // per http://stackoverflow.com/a/2880929/2245617
    var urlParams;
    var match,
      pl     = /\+/g,  // Regex for replacing addition symbol with a space
      search = /([^&=]+)=?([^&]*)/g,
      decode = function (s) { return decodeURIComponent(s.replace(pl, " ")); },
      query  = window.location.search.substring(1);
    urlParams = {};

    while (match = search.exec(query))
     urlParams[decode(match[1])] = decode(match[2]);

    if ( urlParams["d"] ) {
      dateParts = urlParams["d"].split("-");
    } else {
      dateParts = "";
    }

    if ( dateParts.length === 3 ) {
      year = +dateParts[0];
      month = +dateParts[1] - 1; // javascript months are zero-based. SMH.
      day = +dateParts[2];
      var testDate = new Date(year, month, day);
    } else {
      var testDate = new Date();
    }
  } else {
    // Just use today's date if none specified
    var testDate = new Date();    
  }
  return testDate;
}

// what to do with the hoursObject once it's been built
function loadHoursGrid(data, tabletop) {

    var date = getTestDate();

    // all libs/entire week
    var completeHoursObject = buildCompleteHoursObject(data, date);

    // Loop over hours table, rendering each location as a batch
    jQuery("table.hrList tr").each(function() {
      if(jQuery(this).data("location")) {

        var thisLocation = jQuery(this).data("location");

        // look up this location's row in the completeHoursObject
        for (var i = 0; i < Object.keys(completeHoursObject).length; i++) {
          if ( (Object.keys(completeHoursObject)[i]) === thisLocation) {
            renderHours(this,completeHoursObject[thisLocation]);
            break;
          }
        }

      }
    });

}

function loadHoursSingle(data, tabletop) {

  var date = new Date(),
    location,
    singleHoursObject;

  // Start by loading the complete hours object for the given date
  var completeHoursObject = buildCompleteHoursObject(data, date);

  jQuery("[data-location-hours]").each(function() {

    // Read the relevant location
    location = jQuery(this).data("location-hours");

    // Perform any last-minute formatting
    singleHoursObject = getSingleHoursObject(completeHoursObject,date,location)
        .replace(/:00/g,"");

    // Write out to the page
    jQuery(this).html(singleHoursObject);

  });

};

function renderHours(markup, data) {

  for (var i = 0; i < 7; i++) {
    day = jQuery(markup).find("td[data-day="+i+"]");
    // append non-mobile (full) version
    day.append(function() {
      var fullEl = document.createElement("span");
      fullEl.setAttribute("class","hidden-mobile");
      var fullText = data[i]
        .replace("-","- ")
        .replace(/:00/g,"");
      fullEl.innerHTML = fullText;
      return fullEl;
    });
    // append mobile (short) version
    day.append(function() {
      var mobileEl = document.createElement("span");
      mobileEl.setAttribute("class","hidden-non-mobile");
      var mobileText = data[i]
        .replace("-","- ")
        .replace("midnight","midn")
        .replace(/am/g,"a")
        .replace(/pm/g,"p")
        .replace(/:00/g,"");
      mobileEl.innerHTML = mobileText;
      return mobileEl;
    });
  }

}
