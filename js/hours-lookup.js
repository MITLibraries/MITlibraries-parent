// Look up hours information in the Tabletop system
$(function loadHours() {

  // look for data-location-hours attributes
  if ( jQuery("[data-location-hours]").length > 0 ) {

    // found at least one hours display
    Tabletop.init({
      // key is generated by Google doc
      key: '1hK_4p-jx7dxW3RViRcBDSF_4En2QGgxx-Zy7zXkNIQg',

      // location of hard-coded json files (not sure where they'll be stored yet)
      proxy: "/app/libhours-buildjson/",

      // function to call when the data is retrieved
      callback: loadHoursSingle,

      simpleSheet: false
    });

  } else if ( jQuery("table.hrList").length > 0 ) {

    // call this when you are ready to get the data and use it
    Tabletop.init({
        // key is generated by Google doc
        key: '1hK_4p-jx7dxW3RViRcBDSF_4En2QGgxx-Zy7zXkNIQg',

        // location of hard-coded json files (not sure where they'll be stored yet)
        proxy: "/app/libhours-buildjson/",

        // function to call when the data is retrieved
        callback: loadHoursGrid,

        simpleSheet: false
    });

  }

});

function getTestDate() {

  if ( window.location.search ) {
    // Need to make sure that we're getting a valid date specification
    // per http://stackoverflow.com/a/2880929/2245617
    var urlParams;
    var match,
      pl     = /\+/g,  // Regex for replacing addition symbol with a space
      search = /([^&=]+)=?([^&]*)/g,
      decode = function (s) { return decodeURIComponent(s.replace(pl, " ")); },
      query  = window.location.search.substring(1);
    urlParams = {};

    while (match = search.exec(query))
     urlParams[decode(match[1])] = decode(match[2]);

    if ( urlParams["d"] ) {
      dateParts = urlParams["d"].split("-");
    } else {
      dateParts = "";
    }

    if ( dateParts.length === 3 ) {
      year = +dateParts[0];
      month = +dateParts[1] - 1; // javascript months are zero-based. SMH.
      day = +dateParts[2];
      var testDate = new Date(year, month, day);
    } else {
      var testDate = new Date();
    }
  } else {
    // Just use today's date if none specified
    var testDate = new Date();    
  }
  return testDate;
}

// what to do with the hoursObject once it's been built
function loadHoursGrid(data, tabletop) {

    var date = getTestDate();

    // all libs/entire week
    var completeHoursObject = buildCompleteHoursObject(data, date);

    // Loop over hours table, rendering each location as a batch
    jQuery("table.hrList tr").each(function() {
      if(jQuery(this).data("location")) {

        var thisLocation = jQuery(this).data("location");

        // look up this location's row in the completeHoursObject
        for (var i = 0; i < Object.keys(completeHoursObject).length; i++) {
          if ( (Object.keys(completeHoursObject)[i]) === thisLocation) {
            renderHours(this,completeHoursObject[thisLocation]);
            break;
          }
        }

      }
    });

}

function loadHoursSingle(data, tabletop) {

  var date = new Date(),
    location,
    singleHoursObject;

  // Start by loading the complete hours object for the given date
  var completeHoursObject = buildCompleteHoursObject(data, date);

  jQuery("[data-location-hours]").each(function() {

    // Read the relevant location
    location = jQuery(this).data("location-hours");

    // Perform any last-minute formatting
    singleHoursObject = getSingleHoursObject(completeHoursObject,date,location)
        .replace(/:00/g,"");

    // Write out to the page
    jQuery(this).html(singleHoursObject);

  });

};

function renderHours(markup, data) {

  for (var i = 0; i < 7; i++) {
    day = jQuery(markup).find("td[data-day="+i+"]");
    // append non-mobile (full) version
    day.append(function() {
      var fullEl = document.createElement("span");
      fullEl.setAttribute("class","hidden-mobile");
      var fullText = data[i]
        .replace("-"," - ")
        .replace(/:00/g,"");
      fullEl.innerHTML = fullText;
      return fullEl;
    });
    // append mobile (short) version
    day.append(function() {
      var mobileEl = document.createElement("span");
      mobileEl.setAttribute("class","hidden-non-mobile");
      var mobileText = data[i]
        .replace("-"," - ")
        .replace("midnight","midn")
        .replace(/am/g,"a")
        .replace(/pm/g,"p")
        .replace(/:00/g,"");
      mobileEl.innerHTML = mobileText;
      return mobileEl;
    });
  }

}

// takes in the complete data object from the google doc/json file(s)
// and a js date object
// returns a hash (object) of libraries
// library object key is the library name
// library object value is an array of 7 "hours" strings
// each of the 7 corresponds to a day-of-the-week (0=monday, 6=sunday)
// the values are for the week in which the passed date object is in
// e.g. pass in December 16, and you get an object that contains hours for 
// monday-sunday of the week of the 16th, same if you pass in December 17,
// since that is in the same week.
function buildCompleteHoursObject(data, date) {

    // =======================================================================
    // Log initial inputs

    console.log('new libhours: buildCompleteHoursObject');

    console.log('Input: data');
    console.log(data);
    console.log('\n----------\n');
    console.log('Input: date');
    console.log(date);
    console.log('\n----------\n');

    // =======================================================================
    // Define needed variables

    // moment will accept lots of different date formats
    var moment_date = moment(date);

    // use that date to determine the monday of "this" week
    // clone insures we don't alter the original
    var start_date = moment_date.clone().subtract(moment_date.isoWeekday()-1, 'days');

    // array with date (using moment) for each day-of-week (dow) 0=monday, 6=sunday
    var dates_per_day = [];

    // array with name of day for each dow
    // this is needed because we need the spreadsheet to be human-readable
    var names_per_day = [
        'monday',
        'tuesday',
        'wednesday',
        'thursday',
        'friday',
        'saturday',
        'sunday'
    ];

    // hash of exceptions--hash of dates each contain a hash of lib names
    // (this could be reversed if that makes more sense)
    var exceptions = {};

    // hash of hours broken down by semester, location, day
    var hours_data = {};

    // array of semester for each dow--in case the semester changes in the middle of the week
    var semester_per_day = [];

    // hash of hours data for "this" week
    var hours = {};

    // =======================================================================
    // Build exceptions hash

    // exceptions must be accessed by date, then location
    // we have to do some strange iterations because of the format
    // of the spreadsheet

    // skip first column name ("location"), it's not needed for processing, just for human editing
    _.each(data['Holidays and Special Hours'].column_names.slice(1), function(exception_name) {
        // iterate through each library, creating an object for each
        // where the key is the location name, and the value is an object
        // each object should contain key/value pairs of date => hours
        // skip the first row of elements, because that just holds the dates themselves
        _.each(data['Holidays and Special Hours'].elements.slice(1), function(library) {
            exceptions[library.location] = exceptions[library.location] || {};

            // make sure there's an exception for this particular library for this exception name
            if (library[exception_name]) {
                var exception_date = data['Holidays and Special Hours'].elements[0][exception_name];

                exceptions[library.location][exception_date] = library[exception_name];
            }
        });
    });

    console.log('exceptions');
    console.log(exceptions);
    console.log('\n----------\n');

    // =======================================================================
    // Build hours_data hash

    // hours_data must be access by semester, then location, then by day
    _.each(data['Semester Breakdown'].elements, function(semester) {
        hours_data[semester.semestername] = {};

        if (data[semester.semestername]) {
            _.each(data[semester.semestername].elements, function(location) {
                hours_data[semester.semestername][location.location] = location;
            });
        }
    });

    console.log('hours_data');
    console.log(hours_data);
    console.log('\n----------\n');

    // =======================================================================
    // Build... not sure?

    // run through each DOW for "this" week
    // determine what date the day is
    // determine which semester that date falls in
    // this is in case a semester changes in the middle of a week (is that possible?)
    for (var i=0; i < 7; i++) {
        var date = start_date.clone().add(i, 'days');

        dates_per_day.push(date);

        semester_per_day.push(_.find(data['Semester Breakdown'].elements, function(semester) {
            if (    date.isSame(semester.start, 'day') ||
                    date.isSame(semester.end, 'day') ||
                    (   date.isAfter(semester.start, 'day') &&
                        date.isBefore(semester.end, 'day'))) {
                return semester.semestername;
            }
        }));
    }

    console.log('semester_per_day');
    console.log(semester_per_day);
    console.log('\n----------\n');

    // =======================================================================
    // Build final hash of hours

    // build hash of arrays (weekly hours) for display in template
    // lib name as key, value as array of hours for each DOW
        // for each lib
            // for each DOW
                // check date against lib exceptions list
                // check against lib tab hours
                // if no exceptions and no lib tab, use default hours from default hours object
    _.each(data['Holidays and Special Hours'].elements.slice(1), function(lib) {
        for (var i=0; i < 7; i++) {
            var library = lib.location;
            var date = dates_per_day[i].format('M/D/YYYY');
            var day_name = names_per_day[i];
            var semester = semester_per_day[i].semestername;

            hours[library] = hours[library] || {};

            if (exceptions[library] && exceptions[library][date]) {
                hours[library][i] = exceptions[library][date];
            }
            else if (hours_data[semester] && hours_data[semester][library] && hours_data[semester][library][day_name]) {
                hours[library][i] = hours_data[semester][library][day_name];
            }
            else {
                hours[library][i] = 'TBA';
            }
        }
    });

    console.log(hours);
    console.log('\n----------\n');

    return hours;
}

function getSingleHoursObject(completeHoursObject, date, libname) {
    console.log('new libhours: getSingleHoursObject');
    return completeHoursObject[libname][moment(date).isoWeekday()-1];
}
